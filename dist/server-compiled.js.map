{"version":3,"sources":["server.js"],"names":[],"mappings":"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","file":"server-compiled.js","sourcesContent":["var express = require('express');\nvar schedule = require('node-schedule');\nvar firebase = require('firebase');\nvar admin = require(\"firebase-admin\");\nvar CurrentLocationForecast = require('yr-lib').CurrentLocationForecast;\nvar GoogleLocations = require('google-locations');\n\nconst serviceAccount = require(\"../serviceAccountKey.json\");\n\nconst myFirebase = require('./firebase/firebase');\n\nvar app = express();\nvar isProduction = process.env.NODE_ENV === 'production';\nvar port = isProduction ? process.env.PORT : 3000;\n\nvar locations = new GoogleLocations('AIzaSyC8GogpxKovkVzqXV7rS__iH2DWf7lXWZw');\n\napp.use(express.static(__dirname));\n\n//start serveren med å lytte på port 5555, logg en beskjed til konsollet.\n//merk at vi setter serveren til  å lytte på den porten den får tildelt av kjøremiljøet,\n//eller 5555 om den eksempelvis kjører på localhost\nvar server = app.listen(process.env.PORT || 5555, function () {\n  console.log('API lytter på port: ' + server.address().port);\n});\n\n//Enkel rute på rot som sender en bekreftende beskjed på responsen\napp.get('/', function (req, res) {\n  res.send('API svarer')\n});\n\n/*\n app.get('/yr', function (req, res) {\n myFirebase.getYrTemperature(\"yr\").then(function (response) {\n res.status(200).send(response)\n }, function (error) {\n res.status(404).send(error.message)\n });\n });\n */\n\napp.get('/yr/:lat/:lng', function (req, res) {\n  if (req.params.lat) {\n    //CurrentLocationForecast(\"59.896339\", \"10.847261\", new Date(), function(data) {\n    CurrentLocationForecast(req.params.lat, req.params.lng, new Date(), function (data) {\n      var currentData = data[0];\n      var json = JSON.stringify({\n        temperature: currentData.location.temperature.value,\n        dewpointTemperature: currentData.location.dewpointTemperature.value,\n        location: req.params.location,\n        time: currentData.from\n      });\n      res.status(200).send(json);\n    });\n  }\n});\n\napp.get('/places/autocomplete/:query', function (req, res) {\n  locations.autocomplete({\n    input: req.params.query,\n    types: \"(cities)\",\n    language: \"nb\",\n    country: 'no',\n    components: 'country:no'\n  }, function (err, response) {\n    console.log(\"autocomplete: \", response.predictions);\n\n    var result = '{\"places\":[';\n\n    for (var index in response.predictions) {\n      if (index != 0) {\n        result += \",\";\n      }\n      result += '{\"title\":\"' + response.predictions[index].description + '\",'\n        + '\"place_id\":\"' + response.predictions[index].place_id + '\"}';\n    }\n    result += ']}';\n    res.status(200).send(result);\n  });\n\n});\n\napp.get('/place/:placeid', function (req, res) {\n  locations.details({placeid: req.params.placeid}, function (err, response) {\n    console.log(response.result);\n\n    // search details: Google\n    var result = '{\"results\":[';\n    result += '{'\n      + '\"name\":\"' + response.result.name + '\",'\n      + '\"lat\":\"' + response.result.geometry.location.lat + '\",'\n      + '\"lng\":\"' + response.result.geometry.location.lng + '\"}';\n    result += ']}';\n    res.status(200).send(result);\n  });\n});\n\napp.get('/verify/:mytokenId', function (req, res) {\n  // idToken comes from the client app (shown above)\n  admin.auth().verifyIdToken(req.params.mytokenId)\n    .then(function (decodedToken) {\n      var uid = decodedToken.uid;\n      console.log(\"tokenId: \" + req.params.mytokenId + ': ' + uid);\n      res.status(200).send(uid);\n    }).catch(function (error) {\n    console.log(\"error\");\n    res.status(200).send(\"error\");\n  });\n});\n"]}