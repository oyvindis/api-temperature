{"version":3,"sources":["firebase.js"],"names":[],"mappings":";;AAAA,IAAI,WAAW,QAAQ,UAAR,CAAf;AACA,IAAI,QAAQ,QAAQ,gBAAR,CAAZ;;AAEA,IAAI,iBAAiB,QAAQ,8BAAR,CAArB;;AAEA,IAAM,UAAU,yCAAhB;;AAEA,MAAM,aAAN,CAAoB;AAClB,cAAY,MAAM,UAAN,CAAiB,IAAjB,CAAsB,cAAtB,CADM;AAElB,eAAa;AAFK,CAApB;;AAKA;AACA,IAAI,cAAc,MAAM,IAAN,EAAlB;AACA,IAAI,kBAAkB,MAAM,QAAN,EAAtB;;AAEA,IAAI,WAAW,SAAX,QAAW,CAAC,CAAD,EAAI,CAAJ,EAAU;AACvB,SAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,eAAW,YAAM;AACf,UAAI,OAAQ,CAAR,IAAa,QAAb,IAAyB,OAAQ,CAAR,KAAc,QAA3C,EAAqD;AACnD,gBAAQ,IAAE,CAAV;AACD,OAFD,MAEO;AACL,eAAO,2BAAP;AACD;AACF,KAND,EAMG,IANH;AAOD,GARM,CAAP;AASD,CAVD;;AAYA;;AAEA,IAAI,mBAAmB,SAAnB,gBAAmB,CAAC,MAAD,EAAY;AAC/B,SAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;;AAGtC,QAAI,UAAU,gBAAgB,GAAhB,CAAoB,MAAI,MAAxB,EAAgC,IAAhC,CAAqC,OAArC,EAA8C,UAAU,QAAV,EAAoB;AAC9E,UAAI,MAAM,SAAS,GAAT,EAAV;AACA,UAAI,SAAS,GAAb,EAAkB;AAChB,gBAAQ,GAAR;AACD,OAFD,MAEO;AACL,eAAO,IAAI,KAAJ,CAAU,+BAA+B,MAAzC,CAAP;AACD;AACF,KAPa,CAAd;AAQD,GAXM,CAAP;AAYH,CAbD;;AAgBA;;;;;;;;;;;;;;;;;;;;AAoBA;AACA","file":"firebase-compiled.js","sourcesContent":["var firebase = require('firebase');\nvar admin = require(\"firebase-admin\");\n\nvar serviceAccount = require(\"../../serviceAccountKey.json\");\n\nconst baseUrl = 'https://api-temperature.firebaseio.com/';\n\nadmin.initializeApp({\n  credential: admin.credential.cert(serviceAccount),\n  databaseURL: \"https://api-temperature.firebaseio.com/\"\n});\n\n// Use the shorthand notation to retrieve the default app's services\nvar defaultAuth = admin.auth();\nvar defaultDatabase = admin.database();\n\nvar asyncAdd = (a, b) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (typeof  a == 'number' && typeof  b === 'number') {\n        resolve(a+b);\n      } else {\n        reject('Arguments must be numbers');\n      }\n    }, 1500);\n  });\n}\n\n//asynkron funksjon som leser fra strings noden i Firebase og returnerer noden som matcher id\n\nvar getYrTemperature = (source) => {\n    return new Promise((resolve, reject) => {\n\n\n      var nodeRef = defaultDatabase.ref('/'+source).once('value', function (snapshot) {\n        var ret = snapshot.val();\n        if (null !== ret) {\n          resolve(ret);\n        } else {\n          reject(new Error('node not found by source: ' + source));\n        }\n      });\n    });\n};\n\n\n/*\nvar writeTemperatureNode  = (source, localTime, location, temperature, dewpointTemperature) => {\n  //asynkron funksjon som skriver en ny temperaturepostings node til Firebase og returnerer ID'en til denne\n  return new Promise(function (resolve, reject) {\n    var newNodeRef = defaultDatabase.ref('/'+source).set({\n      \"location\": location,\n      \"time\": localTime,\n      \"temperature\": temperature,\n      \"dewpointTemperature\": dewpointTemperature\n    }, function (firebaseResponse) {\n      if (null !== firebaseResponse) {\n        console.log(\"error\");\n        reject(new Error('Something wen\\'t wrong, please try again!'));\n      }\n      resolve(newNodeRef);\n    });\n  });\n}\n*/\n\n//module.exports.getYrTemperature = getYrTemperature;\n//module.exports.writeTemperatureNode = writeTemperatureNode;\n"]}